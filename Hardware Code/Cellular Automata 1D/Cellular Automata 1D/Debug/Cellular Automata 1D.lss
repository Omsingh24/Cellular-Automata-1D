
Cellular Automata 1D.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800100  00800100  00000320  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000350  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009d1  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000082c  00000000  00000000  00000dd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000056b  00000000  00000000  00001605  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  00001b70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000464  00000000  00000000  00001c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000035f  00000000  00000000  0000209c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000023fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a9 30       	cpi	r26, 0x09	; 9
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6d 00 	call	0xda	; 0xda <main>
  88:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <grid_panel>:



void grid_panel(uint8_t x,uint8_t y) //x is 8 bit integer with each bit representing a cell
									//y is row to select
{
  90:	cf 93       	push	r28
  92:	c6 2f       	mov	r28, r22
	SETBIT(GROUND_PORT,y1);    //row gets disabled when +5v
  94:	5a 9a       	sbi	0x0b, 2	; 11
	SETBIT(GROUND_PORT,y2);
  96:	5b 9a       	sbi	0x0b, 3	; 11
	SETBIT(GROUND_PORT,y3);
  98:	5c 9a       	sbi	0x0b, 4	; 11
	SETBIT(GROUND_PORT,y4);
  9a:	5d 9a       	sbi	0x0b, 5	; 11
	SETBIT(GROUND_PORT,y5);
  9c:	5e 9a       	sbi	0x0b, 6	; 11
	SETBIT(GROUND_PORT,y6);
  9e:	5f 9a       	sbi	0x0b, 7	; 11
	shift_out(x); //shifting 8 bits to shift register
  a0:	0e 94 34 01 	call	0x268	; 0x268 <shift_out>
	switch (y)
  a4:	c3 30       	cpi	r28, 0x03	; 3
  a6:	81 f0       	breq	.+32     	; 0xc8 <grid_panel+0x38>
  a8:	28 f4       	brcc	.+10     	; 0xb4 <grid_panel+0x24>
  aa:	c1 30       	cpi	r28, 0x01	; 1
  ac:	49 f0       	breq	.+18     	; 0xc0 <grid_panel+0x30>
  ae:	c2 30       	cpi	r28, 0x02	; 2
  b0:	49 f0       	breq	.+18     	; 0xc4 <grid_panel+0x34>
  b2:	11 c0       	rjmp	.+34     	; 0xd6 <grid_panel+0x46>
  b4:	c5 30       	cpi	r28, 0x05	; 5
  b6:	61 f0       	breq	.+24     	; 0xd0 <grid_panel+0x40>
  b8:	48 f0       	brcs	.+18     	; 0xcc <grid_panel+0x3c>
  ba:	c6 30       	cpi	r28, 0x06	; 6
  bc:	59 f0       	breq	.+22     	; 0xd4 <grid_panel+0x44>
  be:	0b c0       	rjmp	.+22     	; 0xd6 <grid_panel+0x46>
	{
		case 1:
			CLEARBIT(GROUND_PORT,y1); //yth row gets enabled whrn grounded
  c0:	5a 98       	cbi	0x0b, 2	; 11
			break;
  c2:	09 c0       	rjmp	.+18     	; 0xd6 <grid_panel+0x46>
		case 2:
			CLEARBIT(GROUND_PORT,y2);
  c4:	5b 98       	cbi	0x0b, 3	; 11
			break;
  c6:	07 c0       	rjmp	.+14     	; 0xd6 <grid_panel+0x46>
		case 3:
			CLEARBIT(GROUND_PORT,y3);
  c8:	5c 98       	cbi	0x0b, 4	; 11
			break;
  ca:	05 c0       	rjmp	.+10     	; 0xd6 <grid_panel+0x46>
		case 4:
			CLEARBIT(GROUND_PORT,y4);
  cc:	5d 98       	cbi	0x0b, 5	; 11
			break;
  ce:	03 c0       	rjmp	.+6      	; 0xd6 <grid_panel+0x46>
		case 5:
			CLEARBIT(GROUND_PORT,y5);
  d0:	5e 98       	cbi	0x0b, 6	; 11
			break;
  d2:	01 c0       	rjmp	.+2      	; 0xd6 <grid_panel+0x46>
		case 6:
			CLEARBIT(GROUND_PORT,y6);
  d4:	5f 98       	cbi	0x0b, 7	; 11
			break;	
	}
}
  d6:	cf 91       	pop	r28
  d8:	08 95       	ret

000000da <main>:

volatile uint8_t current,next,test;

uint8_t frame_buffer[6]; 
int main(void)
{	
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	00 d0       	rcall	.+0      	; 0xe0 <main+0x6>
  e0:	00 d0       	rcall	.+0      	; 0xe2 <main+0x8>
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
	
	enable_shiftreg();
  e6:	0e 94 27 01 	call	0x24e	; 0x24e <enable_shiftreg>
	
	current=0b11010100; //genration 0
  ea:	84 ed       	ldi	r24, 0xD4	; 212
  ec:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <current>
	next=0b00000000;	//succeding generation
  f0:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <next>
  f4:	0f 2e       	mov	r0, r31
  f6:	f9 e0       	ldi	r31, 0x09	; 9
  f8:	af 2e       	mov	r10, r31
  fa:	f1 e0       	ldi	r31, 0x01	; 1
  fc:	bf 2e       	mov	r11, r31
  fe:	f0 2d       	mov	r31, r0
 100:	ee 24       	eor	r14, r14
 102:	e3 94       	inc	r14
 104:	f1 2c       	mov	r15, r1

						next|=(1<<i);
					}
					else
					{
						next&=~(1<<i);
 106:	4e 2c       	mov	r4, r14
 108:	5f 2c       	mov	r5, r15

volatile uint8_t current,next,test;

uint8_t frame_buffer[6]; 
int main(void)
{	
 10a:	83 e0       	ldi	r24, 0x03	; 3
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	68 2e       	mov	r6, r24
 110:	dc 01       	movw	r26, r24
 112:	7b 2e       	mov	r7, r27
 114:	88 24       	eor	r8, r8
 116:	83 94       	inc	r8
 118:	31 2c       	mov	r3, r1
 11a:	21 2c       	mov	r2, r1
 11c:	0f 2e       	mov	r0, r31
 11e:	f3 e0       	ldi	r31, 0x03	; 3
 120:	cf 2e       	mov	r12, r31
 122:	f1 e0       	ldi	r31, 0x01	; 1
 124:	df 2e       	mov	r13, r31
 126:	f0 2d       	mov	r31, r0
	
	while (1) 
	{	
		for(uint8_t row=1;row<7;row++) //to store each generation in next row
		{
			frame_buffer[row-1]=current;
 128:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <current>
 12c:	f6 01       	movw	r30, r12
 12e:	81 93       	st	Z+, r24
 130:	6f 01       	movw	r12, r30
 132:	82 e3       	ldi	r24, 0x32	; 50
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	9a 83       	std	Y+2, r25	; 0x02
 138:	89 83       	std	Y+1, r24	; 0x01
 13a:	1a c0       	rjmp	.+52     	; 0x170 <main+0x96>
			{

				for(int i=1;i<7;i++) //loop to display 1 frame i.e. 6 rows all at once
				{

					grid_panel(frame_buffer[i-1],i);
 13c:	61 2f       	mov	r22, r17
 13e:	ab 81       	ldd	r26, Y+3	; 0x03
 140:	bc 81       	ldd	r27, Y+4	; 0x04
 142:	8d 91       	ld	r24, X+
 144:	bc 83       	std	Y+4, r27	; 0x04
 146:	ab 83       	std	Y+3, r26	; 0x03
 148:	0e 94 48 00 	call	0x90	; 0x90 <grid_panel>
					latch_pulse();
 14c:	0e 94 31 01 	call	0x262	; 0x262 <latch_pulse>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 150:	ef e9       	ldi	r30, 0x9F	; 159
 152:	ff e0       	ldi	r31, 0x0F	; 15
 154:	31 97       	sbiw	r30, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <main+0x7a>
 158:	00 c0       	rjmp	.+0      	; 0x15a <main+0x80>
 15a:	00 00       	nop
 15c:	1f 5f       	subi	r17, 0xFF	; 255
		{
			frame_buffer[row-1]=current;
			for(uint16_t j=0;j<50;j++) //loop to control speed of simulation
			{

				for(int i=1;i<7;i++) //loop to display 1 frame i.e. 6 rows all at once
 15e:	17 30       	cpi	r17, 0x07	; 7
 160:	69 f7       	brne	.-38     	; 0x13c <main+0x62>
 162:	89 81       	ldd	r24, Y+1	; 0x01
 164:	9a 81       	ldd	r25, Y+2	; 0x02
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	9a 83       	std	Y+2, r25	; 0x02
 16a:	89 83       	std	Y+1, r24	; 0x01
	while (1) 
	{	
		for(uint8_t row=1;row<7;row++) //to store each generation in next row
		{
			frame_buffer[row-1]=current;
			for(uint16_t j=0;j<50;j++) //loop to control speed of simulation
 16c:	89 2b       	or	r24, r25
 16e:	41 f0       	breq	.+16     	; 0x180 <main+0xa6>

volatile uint8_t current,next,test;

uint8_t frame_buffer[6]; 
int main(void)
{	
 170:	6b 82       	std	Y+3, r6	; 0x03
 172:	7c 82       	std	Y+4, r7	; 0x04
 174:	18 2d       	mov	r17, r8
 176:	e2 cf       	rjmp	.-60     	; 0x13c <main+0x62>
 178:	01 96       	adiw	r24, 0x01	; 1
 17a:	2f 5f       	subi	r18, 0xFF	; 255
 17c:	3f 4f       	sbci	r19, 0xFF	; 255
 17e:	04 c0       	rjmp	.+8      	; 0x188 <main+0xae>
 180:	24 2d       	mov	r18, r4
 182:	35 2d       	mov	r19, r5
 184:	83 2d       	mov	r24, r3
 186:	92 2d       	mov	r25, r2
				}
			}
			for(uint8_t i=0;i<8;i++) //loop over all cells(7-0)
			{

				switch (i) 
 188:	88 23       	and	r24, r24
 18a:	19 f0       	breq	.+6      	; 0x192 <main+0xb8>
 18c:	87 30       	cpi	r24, 0x07	; 7
 18e:	89 f0       	breq	.+34     	; 0x1b2 <main+0xd8>
 190:	20 c0       	rjmp	.+64     	; 0x1d2 <main+0xf8>
				{
					case 0: //special case to avoid index 0-1 error
					if(0 rule (!!(current & (1<<(i+1)))))
 192:	40 91 01 01 	lds	r20, 0x0101	; 0x800101 <current>
 196:	41 ff       	sbrs	r20, 1
 198:	06 c0       	rjmp	.+12     	; 0x1a6 <main+0xcc>
					{
						next|=(1<<i); //set (7-i)th bit 1
 19a:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <next>
 19e:	41 60       	ori	r20, 0x01	; 1
 1a0:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <next>
 1a4:	e9 cf       	rjmp	.-46     	; 0x178 <main+0x9e>
					}
					else
					{
						next&=~(1<<i); //set (7-i)th bit 0
 1a6:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <next>
 1aa:	4e 7f       	andi	r20, 0xFE	; 254
 1ac:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <next>
 1b0:	e3 cf       	rjmp	.-58     	; 0x178 <main+0x9e>
					}
					break;

					case 7: //special case to avoid index 7+1 error
					if((!!(current & (1<<(i-1)))) rule 0)
 1b2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <current>
 1b6:	86 ff       	sbrs	r24, 6
 1b8:	06 c0       	rjmp	.+12     	; 0x1c6 <main+0xec>
					{
						next|=(1<<i); 
 1ba:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <next>
 1be:	80 68       	ori	r24, 0x80	; 128
 1c0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <next>
 1c4:	3b c0       	rjmp	.+118    	; 0x23c <main+0x162>
					}
					else
					{

						next&=~(1<<i);
 1c6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <next>
 1ca:	8f 77       	andi	r24, 0x7F	; 127
 1cc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <next>
 1d0:	35 c0       	rjmp	.+106    	; 0x23c <main+0x162>
					}
					break;

					default:
					if((!!(current & (1<<(i-1)))) rule (!!(current & (1<<(i+1))))) //check bit i-1 and i+i
 1d2:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <current>
 1d6:	40 91 01 01 	lds	r20, 0x0101	; 0x800101 <current>
 1da:	70 e0       	ldi	r23, 0x00	; 0
 1dc:	fc 01       	movw	r30, r24
 1de:	31 97       	sbiw	r30, 0x01	; 1
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <main+0x10c>
 1e2:	75 95       	asr	r23
 1e4:	67 95       	ror	r22
 1e6:	ea 95       	dec	r30
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <main+0x108>
 1ea:	61 70       	andi	r22, 0x01	; 1
 1ec:	50 e0       	ldi	r21, 0x00	; 0
 1ee:	02 2e       	mov	r0, r18
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <main+0x11c>
 1f2:	55 95       	asr	r21
 1f4:	47 95       	ror	r20
 1f6:	0a 94       	dec	r0
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <main+0x118>
 1fa:	41 70       	andi	r20, 0x01	; 1
 1fc:	64 17       	cp	r22, r20
 1fe:	69 f0       	breq	.+26     	; 0x21a <main+0x140>
					{

						next|=(1<<i);
 200:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <next>
 204:	a7 01       	movw	r20, r14
 206:	08 2e       	mov	r0, r24
 208:	02 c0       	rjmp	.+4      	; 0x20e <main+0x134>
 20a:	44 0f       	add	r20, r20
 20c:	55 1f       	adc	r21, r21
 20e:	0a 94       	dec	r0
 210:	e2 f7       	brpl	.-8      	; 0x20a <main+0x130>
 212:	46 2b       	or	r20, r22
 214:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <next>
 218:	0e c0       	rjmp	.+28     	; 0x236 <main+0x15c>
					}
					else
					{
						next&=~(1<<i);
 21a:	50 91 02 01 	lds	r21, 0x0102	; 0x800102 <next>
 21e:	b7 01       	movw	r22, r14
 220:	08 2e       	mov	r0, r24
 222:	02 c0       	rjmp	.+4      	; 0x228 <main+0x14e>
 224:	66 0f       	add	r22, r22
 226:	77 1f       	adc	r23, r23
 228:	0a 94       	dec	r0
 22a:	e2 f7       	brpl	.-8      	; 0x224 <main+0x14a>
 22c:	46 2f       	mov	r20, r22
 22e:	40 95       	com	r20
 230:	45 23       	and	r20, r21
 232:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <next>
					latch_pulse();
					_delay_ms(1);

				}
			}
			for(uint8_t i=0;i<8;i++) //loop over all cells(7-0)
 236:	28 30       	cpi	r18, 0x08	; 8
 238:	08 f4       	brcc	.+2      	; 0x23c <main+0x162>
 23a:	9e cf       	rjmp	.-196    	; 0x178 <main+0x9e>
					{
						next&=~(1<<i);
					}
				}
			}
			current=next; //next gen act as current for the next gen
 23c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <next>
 240:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <current>
	
	
	
	while (1) 
	{	
		for(uint8_t row=1;row<7;row++) //to store each generation in next row
 244:	ca 14       	cp	r12, r10
 246:	db 04       	cpc	r13, r11
 248:	09 f0       	breq	.+2      	; 0x24c <main+0x172>
 24a:	6e cf       	rjmp	.-292    	; 0x128 <main+0x4e>
 24c:	67 cf       	rjmp	.-306    	; 0x11c <main+0x42>

0000024e <enable_shiftreg>:
#include "macros.h"
#include "pin_def.h"

void enable_shiftreg()
{
	DDRB |= ((1<<DDB2) | (1<<DDB3) | (1<<DDB4)); //Data direction register set to 1 for output port enable
 24e:	84 b1       	in	r24, 0x04	; 4
 250:	8c 61       	ori	r24, 0x1C	; 28
 252:	84 b9       	out	0x04, r24	; 4
	DDRD |= ((1<<DDD7) | (1<<DDD2) | (1<<DDD3) |(1<<DDD4) |(1<<DDD5) |(1<<DDD6));//Data direction register set to 1 for output port enable
 254:	8a b1       	in	r24, 0x0a	; 10
 256:	8c 6f       	ori	r24, 0xFC	; 252
 258:	8a b9       	out	0x0a, r24	; 10
 25a:	08 95       	ret

0000025c <clock_pulse>:
}


void clock_pulse() //clock pulse to shift register
{
	SETBIT (CLOCK_PORT,CLOCK_PIN);
 25c:	2a 9a       	sbi	0x05, 2	; 5
	CLEARBIT (CLOCK_PORT,CLOCK_PIN);
 25e:	2a 98       	cbi	0x05, 2	; 5
 260:	08 95       	ret

00000262 <latch_pulse>:
}

void latch_pulse()//latch pulse to shift register
{
	
	SETBIT(LATCH_PORT,LATCH_PIN);
 262:	2b 9a       	sbi	0x05, 3	; 5
	CLEARBIT(LATCH_PORT,LATCH_PIN);
 264:	2b 98       	cbi	0x05, 3	; 5
 266:	08 95       	ret

00000268 <shift_out>:
}



void shift_out(uint8_t value) //shift 8 bits to shift register //note latching is manual
{
 268:	0f 93       	push	r16
 26a:	1f 93       	push	r17
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
	
	uint8_t i;
	
	CLEARBIT(LATCH_PORT,LATCH_PIN);
 270:	2b 98       	cbi	0x05, 3	; 5
 272:	c0 e0       	ldi	r28, 0x00	; 0
 274:	d0 e0       	ldi	r29, 0x00	; 0
	
	for (i = 0; i < 8; i++) //loop over 8 bits in integer and shift to register
	 {
		if (!!(value & (1<<(i)))) //checking the ith bit of innteger
 276:	08 2f       	mov	r16, r24
 278:	10 e0       	ldi	r17, 0x00	; 0
 27a:	98 01       	movw	r18, r16
 27c:	0c 2e       	mov	r0, r28
 27e:	02 c0       	rjmp	.+4      	; 0x284 <shift_out+0x1c>
 280:	35 95       	asr	r19
 282:	27 95       	ror	r18
 284:	0a 94       	dec	r0
 286:	e2 f7       	brpl	.-8      	; 0x280 <shift_out+0x18>
 288:	20 ff       	sbrs	r18, 0
 28a:	02 c0       	rjmp	.+4      	; 0x290 <shift_out+0x28>
		{
			SETBIT(DATA_PORT,DATA_PIN);	//data pin set to 1 if ith  bit is 1
 28c:	2c 9a       	sbi	0x05, 4	; 5
 28e:	01 c0       	rjmp	.+2      	; 0x292 <shift_out+0x2a>
		}
		else
		{
			CLEARBIT(DATA_PORT,DATA_PIN); //data pin set to 0 if ith bit is 0
 290:	2c 98       	cbi	0x05, 4	; 5
		}
		clock_pulse(); //shifting 1 bit on clock pulse
 292:	0e 94 2e 01 	call	0x25c	; 0x25c <clock_pulse>
 296:	21 96       	adiw	r28, 0x01	; 1
	
	uint8_t i;
	
	CLEARBIT(LATCH_PORT,LATCH_PIN);
	
	for (i = 0; i < 8; i++) //loop over 8 bits in integer and shift to register
 298:	c8 30       	cpi	r28, 0x08	; 8
 29a:	d1 05       	cpc	r29, r1
 29c:	71 f7       	brne	.-36     	; 0x27a <shift_out+0x12>
		{
			CLEARBIT(DATA_PORT,DATA_PIN); //data pin set to 0 if ith bit is 0
		}
		clock_pulse(); //shifting 1 bit on clock pulse
	}
}
 29e:	df 91       	pop	r29
 2a0:	cf 91       	pop	r28
 2a2:	1f 91       	pop	r17
 2a4:	0f 91       	pop	r16
 2a6:	08 95       	ret

000002a8 <_exit>:
 2a8:	f8 94       	cli

000002aa <__stop_program>:
 2aa:	ff cf       	rjmp	.-2      	; 0x2aa <__stop_program>
